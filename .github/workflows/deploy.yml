name: DEPLOY CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm cache clean --force
    - run: rm -rf node_modules package-lock.json
    - run: npm install
    - name: Create environment.prod.ts
      run: |
        echo "NG_APP_FIREBASE_API_KEY=${{ secrets.NG_APP_FIREBASE_API_KEY }}
        NG_APP_FIREBASE_AUTH_DOMAIN=${{ secrets.NG_APP_FIREBASE_AUTH_DOMAIN }}
        NG_APP_FIREBASE_DB_URL=${{ secrets.NG_APP_FIREBASE_DB_URL }}
        NG_APP_FIREBASE_PROJECT_ID=${{ secrets.NG_APP_FIREBASE_PROJECT_ID }}
        NG_APP_FIREBASE_STORAGE_BUCKET=${{ secrets.NG_APP_FIREBASE_STORAGE_BUCKET }}
        NG_APP_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.NG_APP_FIREBASE_MESSAGING_SENDER_ID }}
        NG_APP_FIREBASE_APP_ID=${{ secrets.NG_APP_FIREBASE_APP_ID }}
        NG_APP_FIREBASE_MEASUREMENT_ID=${{ secrets.NG_APP_FIREBASE_MEASUREMENT_ID }}
        " > .env
    - run: npm run build
    - run: npm test

    - name: Clean deployment directory
      env:
        SSH_HOST: ${{ secrets.SSH_HOST }}
        SSH_USER: ${{ secrets.SSH_USER }}
        SSH_PASS: ${{ secrets.SSH_PASS }}
        DEPLOY_PATH: ${{ vars.DEPLOY_PATH }}
      run: |
        sshpass -p "$SSH_PASS" ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "rm -rf $DEPLOY_PATH/*"

    - name: Deploy to external server via SFTP
      env:
        SSH_HOST: ${{ secrets.SSH_HOST }}
        SSH_USER: ${{ secrets.SSH_USER }}
        SSH_PASS: ${{ secrets.SSH_PASS }}
        DEPLOY_PATH: ${{ vars.DEPLOY_PATH }}
      run: |
        sshpass -p "$SSH_PASS" rsync -avz -e "ssh -o StrictHostKeyChecking=no" ./dist/cd/ $SSH_USER@$SSH_HOST:$DEPLOY_PATH
